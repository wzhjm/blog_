<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qqblog.vercel.app</id>
    <title>黄金淼博客</title>
    <updated>2021-12-24T13:43:01.455Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qqblog.vercel.app"/>
    <link rel="self" href="https://qqblog.vercel.app/atom.xml"/>
    <subtitle>黄金淼博客</subtitle>
    <logo>https://qqblog.vercel.app/images/avatar.png</logo>
    <icon>https://qqblog.vercel.app/favicon.ico</icon>
    <rights>All rights reserved 2021, 黄金淼博客</rights>
    <entry>
        <title type="html"><![CDATA[智能合约事件调用的5000区块限制解决方案]]></title>
        <id>https://qqblog.vercel.app/post/智能合约事件调用的5000区块限制解决方案/</id>
        <link href="https://qqblog.vercel.app/post/智能合约事件调用的5000区块限制解决方案/">
        </link>
        <updated>2021-12-24T11:42:58.000Z</updated>
        <content type="html"><![CDATA[<p>首先这是个很简单的方案，只是最近困扰了一段时间，所以写篇专门的文章。</p>
<p>上代码...</p>
<pre><code>mycontract.getPastEvents('myEvent', {filter: {}, fromBlock: 0, toBlock: &quot;latest&quot;});
</code></pre>
<p>这是web3调用事件的方法，我相信在看这个方法的朋友一定疑问且开心 。“这能从第0个区块直接查到最新的区块？”</p>
<p>事实在不同的节点的RPC，他们的通常会限制你查的区块大小，metamask是5000区块，这也好理解，毕竟从0到最新区块所帅选的数据量比较大。</p>
<p>我们在开发时或多或少会遇到调用以段时间的事件记录，打个比方，我写个DAPP，要调用用户这段时在我的DAPP上的各项资金流动记录，5000个区块显然不够，解决方案就是循环调用...这么一说估计很容易理解。</p>
<pre><code>web3js.eth.getBlockNumber(function(error, result){
	var _from = result - 890000;
        var _to = _from + 5000;
	for(var i = 0; i &lt; 180; i++){
	    mycontrack.getPastEvents('myEvent', {filter: {}, fromBlock: _from, toBlock: _to}).then((res) =&gt; {
            for(var m = 0;m &lt;res.length;m++){
	          //拿出数据记录
	     }
        });
	_to += 5000;
	_from += 5000;
	}	
});
</code></pre>
<p>我们通过获取区块号，并用变量代替fromBlovk和toBlock,进行循环遍历，拿出事件的记录，写到前端里面就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于apt.saurik.com无法下载的问题终极解决办法]]></title>
        <id>https://qqblog.vercel.app/post/关于apt.saurik.com无法下载的问题终极解决办法/</id>
        <link href="https://qqblog.vercel.app/post/关于apt.saurik.com无法下载的问题终极解决办法/">
        </link>
        <updated>2021-12-20T05:45:51.000Z</updated>
        <content type="html"><![CDATA[<p>cydia其实就是apt在iphone上的前端，安装过程无非就是通过apt下载软件，然后用dpkg安装，而apt则是用通过source list里的定义的源下载软件，既然网站可以直接访问，那就肯定是source list里定义的源有问题。<br>
顺着这个思路查了一圈，没看出有什么问题，然后用人工方式模拟cydia更新软件的流程，一下就找到问题了。<br>
apt.saurik.com本身是没有问题的，也没有被和谐，完全正常。出问题的是cache.saurik.com，更大的问题是，saurik的软件实际上正是放在cache.saurik.com上的，所以就不能正常下载安装了。</p>
<h1 id="解决办法">解决办法</h1>
<p>所幸的是，apt.saurik.com提供了另一个可以替代cache.saurik.com的源：apt.saurik.com/cydia<br>
只要修改一下apt的source list即可解决问题。</p>
<p>打开iphone的/etc/apt/souces.list.d/saurik.list<br>
编辑：<br>
deb http://apt.saurik.com/ tangelo-3.7 main</p>
<p>改为：<br>
deb http://apt.saurik.com/cydia/ tangelo-3.7 main</p>
<p>然后保存。<br>
到cydia里，烦人host unreachable已经消失了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用vue-cropper剪裁图片并上传]]></title>
        <id>https://qqblog.vercel.app/post/利用vue-cropper剪裁图片并上传/</id>
        <link href="https://qqblog.vercel.app/post/利用vue-cropper剪裁图片并上传/">
        </link>
        <updated>2021-12-20T02:12:56.000Z</updated>
        <content type="html"><![CDATA[<p>因为需求所以利用vue的插件vue-cropper进行图片剪裁。</p>
<h1 id="安装">安装</h1>
<p><code>npm install vue-cropper</code></p>
<h1 id="使用">使用</h1>
<p><code>import VueCropper from vue-cropper</code></p>
<h1 id="效果图">效果图</h1>
<figure data-type="image" tabindex="1"><img src="https://qqblog.vercel.app/post-images/1639966410263.png" alt="" loading="lazy"></figure>
<p>此次主要是利用Element-ui+vue-cropper完成此需求,话不多说上代码。</p>
<pre><code>&lt;div&gt;
    &lt;el-upload
        :action=&quot;''&quot;
        list-type=&quot;picture-card&quot;
        :file-list=&quot;MastergraphPicList&quot;
        :limit=&quot;10&quot;
        :on-change='changeUpload'
        :auto-upload=&quot;false&quot;
        :show-file-list=&quot;isFlag&quot;
        :http-request=&quot;ServiceUpLoad&quot;
        :on-success=&quot;(response,file,fileList) =&gt; handlePostSuccess(response,file,fileList)&quot;
        :on-remove=&quot;(response,file,fileList) =&gt; handleDelete(response,file,fileList)&quot;
        &gt;
        &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;
        &lt;div slot=&quot;tips&quot; class=&quot;el-upload__tip&quot;&gt;支持jpg、jpge、png格式，大小不超过2m，限10张&lt;/div&gt;
    &lt;/el-upload&gt;
&lt;/div&gt;
</code></pre>
<p>上传图片时会触发changeUpload此钩子函数，由于剪裁图片是以弹框形式唤起，因此我们的行为可以在此钩子函数中写。</p>
<pre><code>    changeUpload(file, fileList) {
        &lt;!--限制文件格式、大小--&gt;
        const isLt2M = file.size / 1024 / 1024 &lt; 2
        if (!isLt2M) {
            this.$message.error('上传文件大小不能超过 2MB!')
            return false
        }
        &lt;!--写入回显列表--&gt;
        this.MastergraphPicList.push(file);
        &lt;!--触发子级方法，唤起剪裁框--&gt;
        this.$children[0].isShow();
    },
</code></pre>
<p>剪裁框模板 cropper.vue</p>
<pre><code>&lt;template&gt;
    &lt;div&gt;
        &lt;el-dialog title=&quot;图片剪裁&quot; :visible.sync=&quot;dialogVisible&quot; append-to-body&gt;
        &lt;div class=&quot;cropper-content&quot;&gt;
            &lt;div class=&quot;cropper&quot; style=&quot;text-align:center&quot;&gt;
            &lt;vueCropper
                ref=&quot;cropper&quot;
                :img=&quot;option.img&quot;
                :outputSize=&quot;option.size&quot;
                :outputType=&quot;option.outputType&quot;
                :info=&quot;true&quot;
                :full=&quot;option.full&quot;
                :canMove=&quot;option.canMove&quot;
                :canMoveBox=&quot;option.canMoveBox&quot;
                :original=&quot;option.original&quot;
                :autoCrop=&quot;option.autoCrop&quot;
                :fixed=&quot;option.fixed&quot;
                :fixedNumber=&quot;option.fixedNumber&quot;
                :centerBox=&quot;option.centerBox&quot;
                :infoTrue=&quot;option.infoTrue&quot;
                :fixedBox=&quot;option.fixedBox&quot;
            &gt;&lt;/vueCropper&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;
            &lt;el-button @click=&quot;cancel&quot;&gt;取 消&lt;/el-button&gt;
            &lt;el-button type=&quot;primary&quot; @click=&quot;finish&quot; :loading=&quot;loading&quot;&gt;确认&lt;/el-button&gt;
        &lt;/div&gt;
        &lt;/el-dialog&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import axios from 'axios'
import { VueCropper } from 'vue-cropper'
import md5 from 'js-md5';
import { postossImage } from '../../../api/index'
    export default {
        name:'cropper',
        data() {
            return {
                // 裁剪组件的基础配置option
                option: {
                    img: '', // 裁剪图片的地址
                    info: true, // 裁剪框的大小信息
                    outputSize: 0.8, // 裁剪生成图片的质量
                    outputType: 'jpeg', // 裁剪生成图片的格式
                    canScale: true, // 图片是否允许滚轮缩放
                    autoCrop: true, // 是否默认生成截图框
                    autoCropWidth: 600, // 默认生成截图框宽度
                    autoCropHeight: 300, // 默认生成截图框高度
                    fixedBox: false, // 固定截图框大小 不允许改变
                    fixed: false, // 是否开启截图框宽高固定比例
                    fixedNumber: [7, 5], // 截图框的宽高比例
                    full: true, // 是否输出原图比例的截图
                    canMoveBox: true, // 截图框能否拖动
                    original: true, // 上传图片按照原始比例渲染
                    high: true,
                    centerBox: true, // 截图框是否被限制在图片里面
                    infoTrue: true // true 为展示真实输出图片宽高 false 展示看到的截图框宽高
                },
                picsList: [],  //页面显示的数组
                // 防止重复提交
                loading: false,
                dialogVisible:false,        // 控制弹框的显示
                fileinfo:[],      
                RequestSource:'',           // oss直传源地址
                baseurl:'',                 // 裁剪后的base64地址
                isVictory:false,        // 识别用户是点否关闭
            }
        },
        components:{VueCropper},
        created() {
            this.$on('is-Show',this.isShow);
        },
        methods:{
            isShow(file){
                this.fileinfo = file;
                // 传递需要剪裁的地址 以弹框形式打开
                this.$nextTick( () =&gt; {
                    this.option.img = file.url;
                    this.dialogVisible = true;
                    this.handlePostSuccess(file.url);
                })
            },
            // 关闭图片剪裁
            cancel() {
                this.dialogVisible = false;
                // 点击取消时 去除已经回显的图片
                this.$parent.dislodge(this.fileinfo);
            },
            // 确认剪裁后触发
            finish() {
                this.$refs.cropper.getCropData((data) =&gt; {
                    this.baseurl = data;
                    //将剪裁后base64的图片转化为file格式
                    let file = this.convertBase64UrlToBlob(data)
                    file.name = this.fileinfo.name
                    &lt;!--let file = URL.createObjectURL(data).match(/[^blob:]+/g).join('');--&gt;
                    this.Directpass(this.RequestSource,file).then( (res) =&gt; {
                        if (res.status === 200) {
                            this.$parent.handleSuccess({
                                uid:this.fileinfo.uid,
                                imgUrl:res.config.url.split('?')[0]
                            });
                            this.dialogVisible = false;
                            this.isVictory = true;
                            this.loading = true;
                            this.$message('上传成功!');
                            // 防止用户不上传图片 点击关闭时 不能及时删除回显的问题
                            setTimeout(() =&gt; {
                                this.isVictory = false;
                            },1000)
                        }
                    })
                    
                })
            },
            // 上传服务主图
            handlePostSuccess(file) {
                postossImage({
                    fileMd5:md5(file)
                }).then( (res) =&gt; {
                    this.RequestSource = res.data;
                })
            },
            Directpass(url,file){
                return new Promise( (resolve,reject) =&gt; {
                axios.put(url,file,{headers:{&quot;x-oss-meta-author&quot;:&quot;deshe&quot;,&quot;Content-Type&quot;:&quot;application/octet-stream&quot;}}).then( (res) =&gt; {
                    resolve(res)
                })
            })
        },
        // 将base64的图片转换为file文件
        convertBase64UrlToBlob(urlData) {
            let bytes = window.atob(urlData.split(',')[1]);//去掉url的头，并转换为byte
            //处理异常,将ascii码小于0的转换为大于0
            let ab = new ArrayBuffer(bytes.length);
            let ia = new Uint8Array(ab);
            for (var i = 0; i &lt; bytes.length; i++) {
                ia[i] = bytes.charCodeAt(i);
            }
            return new Blob([ab], { type: 'image/jpeg' });
        }
    },
    watch:{
        dialogVisible() {
            if (!this.dialogVisible &amp;&amp; !this.isVictory) {
                this.loading = false
                // 点击关闭时 去除已经回显的图片
                this.$parent.dislodge(this.fileinfo);
            } else {
                this.loading = false;
            }
        }
    }
}
&lt;/script&gt;

&lt;style scoped lang=&quot;less&quot;&gt;
.cropper-content {
    .cropper {
        width: auto;
        height: 300px;
    }
}
&lt;/style&gt;
</code></pre>
<h1 id="总结">总结：</h1>
<p>在cropper.vue中主要起剪裁作用的是finish()方法以及convertBase64UrlToBlob()。 需要注意的是：剪切后的图片返回的是一串没有意义的字符串，传递到服务器无法识别，在这里我用了 this.$refs.cropper.getCropData() 把剪切的图片以base64的形式返回,接着把base64数据做一层处理，转化为Blob对象，里面存储着剪裁后图片的数据序列，接着把处理好的地址往服务器丢就搞定了。<br>
还有就是： fixed设为false将不限剪裁的宽高</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[币安智能链钱包配置]]></title>
        <id>https://qqblog.vercel.app/post/币安智能链钱包配置/</id>
        <link href="https://qqblog.vercel.app/post/币安智能链钱包配置/">
        </link>
        <updated>2021-12-20T02:05:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="metamask-配置">metamask 配置</h1>
<h1 id="点击小狐狸">点击小狐狸</h1>
<ul>
<li>点击右侧头像</li>
<li>选择下方设置</li>
<li>选择下方网络</li>
<li>添加网络信息，具体信息如下设置</li>
</ul>
<h1 id="测试网络配置">测试网络配置</h1>
<ul>
<li>Network Name：BSC Testnet</li>
<li>New RPC URL ：https://data-seed-prebsc-1-s1.binance.org:8545/</li>
<li>Chain ID：97</li>
<li>Currency symbol：BNB</li>
<li>Block Explorer URL：https://testnet.bscscan.com</li>
</ul>
<h1 id="正式网络配置">正式网络配置</h1>
<ul>
<li>Network Name：BSC Mainnet</li>
<li>New RPC URL ：https://bsc-dataseed1.binance.org/</li>
<li>Chain ID：56</li>
<li>Currency symbol：BNB</li>
<li>Block Explorer URL：https://bscscan.com/</li>
</ul>
<h1 id="水龙头领取测试币">水龙头领取测试币</h1>
<ul>
<li>https://testnet.binance.org/faucet-smart</li>
<li>输入币安智能链测试网钱包地址</li>
<li>give me BNB 点击下拉选择6.25BNB</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[flex布局]]></title>
        <id>https://qqblog.vercel.app/post/flex布局/</id>
        <link href="https://qqblog.vercel.app/post/flex布局/">
        </link>
        <updated>2021-12-20T02:05:40.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-html">display: flex;
//垂直居中
justify-content: center;
//水平居中
align-items: center;
//垂直排列
flex-direction: column;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ipfs-api]]></title>
        <id>https://qqblog.vercel.app/post/ipfs-api/</id>
        <link href="https://qqblog.vercel.app/post/ipfs-api/">
        </link>
        <updated>2021-12-20T02:05:38.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;template&gt;
  &lt;div class=&quot;hello&quot;&gt;
&lt;h1&gt;{{ msg }}&lt;/h1&gt;
&lt;input type=&quot;file&quot; @change=&quot;on_change&quot; /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
const ipfsAPI = require(&quot;ipfs-api&quot;);
export default {
  name: &quot;HelloWorld&quot;,
  data() {
return {
  msg: &quot;Welcome to Your Vue.js App&quot;,
};
  },
  methods: {
async on_change(e) {
  console.log(e.target.value);
  let file = e.target.files[0];
  const ipfs = ipfsAPI({
host: &quot;3.35.231.32&quot;,
port: &quot;5001&quot;,
protocol: &quot;http&quot;,
  });
  let reader = new FileReader();
  reader.readAsArrayBuffer(file);
  reader.onloadend = (e) =&gt; {
console.log(reader);
new Promise(function (resolve, reject) {
  const buffer = Buffer.from(reader.result);
  ipfs
.add(buffer)
.then((response) =&gt; {
  console.log(response);
  resolve(response[0].hash);
})
.catch((err) =&gt; {
  console.error(err);
  reject(err);
});
});
  };
},
  },
};
&lt;/script&gt;

&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;
&lt;style scoped&gt;
h1,
h2 {
  font-weight: normal;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git操作]]></title>
        <id>https://qqblog.vercel.app/post/git操作/</id>
        <link href="https://qqblog.vercel.app/post/git操作/">
        </link>
        <updated>2021-12-20T02:05:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="准备配置">准备配置</h1>
<ul>
<li>去github（码云）上根据网站的提示来创建自己的远程Repository（仓库）</li>
<li>$ git init # （建立本地git仓库）——注意：此指令本地源码根目录执行，执行成功后，会在当前目录生成一个隐藏的名字为“.git”的目录。所有对本地仓库的操作信息都在此目录下存储。</li>
<li>$ git remote add origin https://xxx@xx.git # （将本地的仓库关联到GitHub（码云）上对应的仓库，后面的https链接改成GitHub（码云）上对应的仓库的.git地址）</li>
<li>$ git fetch</li>
<li>$ git branch master origin/master</li>
<li>$ git checkout master</li>
</ul>
<h1 id="提交代码">提交代码</h1>
<ul>
<li>$ git add . # （将项目的所有文件添加到本地仓库中）——说明：此处的“.”表示当前所有目录，如果只添加某些目录，则使用：git add [目录1] [目录2]。</li>
<li>$ git commit -m “新添加的文件内容描述” # 添加文件描述</li>
<li>$ git push -u origin master #将本地仓库推送到远程仓库</li>
</ul>
<h1 id="git常用命令">git常用命令</h1>
<ul>
<li>$ git clone [address] # 复制代码库到本地</li>
<li>$ git add [file] … # 添加文件到代码库中</li>
<li>$ git rm [file] … # 删除代码库的文件</li>
<li>$ git commit -m [message] # 提交更改，在修改了文件以后，使用这个命令提交修改</li>
<li>$ git pull # 从远程同步代码库到本地。（例如：git pull origin master ）——说明：此处的使用origin是因为第三步在建立本地仓库时git init 指令后面没有给本地仓库命名，因此origin为缺省的名字。如果在执行git init时添加了自定义名字，请使用自定义名字。本地仓库的名字没有要求非得和远程仓库名字相同。（此处的使用master是因为远程仓库的master分支，如果想上传到其它分支，此处改为指定分支名称即可）</li>
<li>$ git push # 推送代码到远程代码库。（例如：git push -u origin master）——说明：如果没有保存github（码云）的登录账号和密码， 再执行此指令后会提示输入Username和Password，输入正确的github（码云）的登录账号和密码之后就会上传之前提交的代码</li>
<li>$ git branch # 查看当前分支。带*是当前分支</li>
<li>$ git branch [branch-name] # 新建一个分支</li>
<li>$ git branch -d [branch-name] # 删除一个分支</li>
<li>$ git checkout [branch-name] # 切换到指定分支</li>
<li>$ git log # 查看提交记录（即历史的 commit 记录）</li>
<li>$ git status # 当前修改的状态，是否修改了还没提交，或者那些文件未使用</li>
<li>$ git reset [log] # 恢复到历史版本</li>
</ul>
<h1 id="更新代码">更新代码</h1>
<ul>
<li>查看本地代码和本地仓库中代码的区别<br>
$ git status</li>
<li>确认无误后更新全部修改到本地仓库<br>
$ git add *</li>
<li>提交修改<br>
$ git commit -m “说明信息”</li>
<li>获取远程仓库指定分支的最新代码<br>
$ git pull origin master</li>
<li>上传到远程仓库指定分支上<br>
$ git push origin maste</li>
</ul>
<h1 id="进行多人协作开发">进行多人协作开发</h1>
<ul>
<li>先由项目负责人创建仓库。</li>
<li>邀请成为仓库管理员。</li>
<li>在桌面创建的新文件中打开git Bash</li>
<li>git clone 仓库地址</li>
<li>开始编辑自己的代码。</li>
<li>git checkout -b 分支名</li>
<li>git add .</li>
<li>git commit -m ‘描述’</li>
<li>git push origin 分支名</li>
<li>git checkout master切换到主分支</li>
<li>git pull origin 分支名 。打开代码运行查看是否能正常运行，如有错误需要手动修- 改。</li>
<li>冲突解决后再 git push origin 主分支</li>
<li>打开码云刷新个人主页查看一下有没有推送成功</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[是否换行]]></title>
        <id>https://qqblog.vercel.app/post/是否换行/</id>
        <link href="https://qqblog.vercel.app/post/是否换行/">
        </link>
        <updated>2021-12-20T02:05:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code>//换行
word-break: break-all;
//不换行
white-space: nowrap;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Hexo图片无法显示问题]]></title>
        <id>https://qqblog.vercel.app/post/解决Hexo图片无法显示问题/</id>
        <link href="https://qqblog.vercel.app/post/解决Hexo图片无法显示问题/">
        </link>
        <updated>2021-12-20T02:05:26.000Z</updated>
        <content type="html"><![CDATA[<p>版本：Hexo 3以上</p>
<p>最近搭建hexo博客时遇到了图片部署后不显示的问题，如图：</p>
<p>上网找了很多方式都没有完美解决问题，后来查看了官方文档后终于解决了问题（完美解决），现在贴出来如下。建议以后大家遇到了问题也先去看看官方文档：https://hexo.io/zh-cn/docs</p>
<p>解决方案如下：</p>
<ol>
<li>
<p>在根目录下配置文件_config.yml 中有 post_asset_folder:false改为true。这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。</p>
</li>
<li>
<p>git bash安装插件：npm install https://github.com/wzhjm/hexo-asset-image --save（这是个修改过的插件，经测试无问题），使用这个插件来引入图片，而不是网上那些方法里说的用传统md语法相对路径的方法。</p>
</li>
<li>
<p>插入图片时用这种方式：{% asset_img test.jpg This is an test image %}<br>
其中test.jpg就是你要引用的图片，我这里就是test.jpg，后面的This is an test image是图片描述，可以自己修改。</p>
</li>
<li>
<p>这样就能成功显示了，测试下吧：hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hexo+yilia添加复制代码块功能]]></title>
        <id>https://qqblog.vercel.app/post/hexo-yilia添加复制代码块功能/</id>
        <link href="https://qqblog.vercel.app/post/hexo-yilia添加复制代码块功能/">
        </link>
        <updated>2021-12-16T05:45:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第一步">第一步</h1>
<p>在themes\yilia\source中新建js文件夹，在该文件夹中新建clipboard_use.js如下</p>
<pre><code>$(&quot;.highlight&quot;).wrap(&quot;&lt;div class='code-wrapper' style='position:relative'&gt;&lt;/div&gt;&quot;);
/*页面载入完成后，创建复制按钮*/
!function (e, t, a) {
    /* code */
    var initCopyCode = function () {
        var copyHtml = '';
        copyHtml += '&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;';
        copyHtml += '  &lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;';
        copyHtml += '&lt;/button&gt;';
        $(&quot;.highlight .code&quot;).before(copyHtml);
        var clipboard = new ClipboardJS('.btn-copy', {
            target: function (trigger) {
                return trigger.nextElementSibling;
            }
        });
        clipboard.on('success', function (e) {
            e.trigger.innerHTML = &quot;&lt;i class='fa fa-clipboard'&gt;&lt;/i&gt;&lt;span&gt;复制成功&lt;/span&gt;&quot;
            setTimeout(function () {
                e.trigger.innerHTML = &quot;&lt;i class='fa fa-clipboard'&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot;
            }, 1000)
           
            e.clearSelection();
        });
        clipboard.on('error', function (e) {
            e.trigger.innerHTML = &quot;&lt;i class='fa fa-clipboard'&gt;&lt;/i&gt;&lt;span&gt;复制失败&lt;/span&gt;&quot;
            setTimeout(function () {
                e.trigger.innerHTML = &quot;&lt;i class='fa fa-clipboard'&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot;
            }, 1000)
            e.clearSelection();
        });
    }
    initCopyCode();
}(window, document);
</code></pre>
<h1 id="第二步">第二步</h1>
<p>在themes\yilia\layout\layout.ejs 文件的结尾处 </body> （注意这个是body的结束标签）前插入如下代码：</p>
<pre><code>&lt;!-- 代码块复制功能开始 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clipboard_use.js&quot;&gt;&lt;/script&gt;
&lt;!-- 代码块复制功能结束 --&gt;
</code></pre>
<h1 id="第三步">第三步</h1>
<p>在themes\yilia\source\main.0cf68a.css 最末尾添加如下代码：</p>
<pre><code>.btn-copy {
    display: inline-block;
    position: absolute;
    right: 5px;
    top: 5px;
    cursor: pointer;
    background-color: #515151;
    border: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-appearance: none;
    font-size: 13px;
    font-weight: 700;
    line-height: 20px;
    color: #d5d5d5;
    -webkit-transition: opacity .3s ease-in-out;
    -o-transition: opacity .3s ease-in-out;
    transition: opacity .3s ease-in-out;
    padding: 2px 6px;
}

.btn-copy span {
    margin-left: 5px
}

.code-wrapper .btn-copy:hover {
    color: #fff;
}
</code></pre>
<h1 id="结果展示如图">结果展示如图</h1>
<figure data-type="image" tabindex="1"><img src="https://qqblog.vercel.app/post-images/1639966517978.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>